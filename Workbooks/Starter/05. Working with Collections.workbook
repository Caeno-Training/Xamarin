---
uti: com.xamarin.workbook
platforms:
- Console
---

```csharp
using static System.Console;
```

## Trabalhando com Coleções

Alguns exercícios para prática do trabalho com coleções do C#.

Para esses exercícios vamos nos basear na classe **Book** declarada abaixo, que usa a sintaxe reduzida de declaração de propriedades para definir 4 atributos.

```csharp
// Uma classe para representar as informações de um livro.
class Book {
    public string Title { get; set; }
    public string Author { get; set; }
    public string Publisher { get; set; }
    public int Year { get; set; }
}
```

A variável **bookshelf** armazena uma lista com 20 livros. Note que usamos a sintaxe de inicialização de listas do C# para incluir os elementos da lista no momento da sua criação. Os objetos também usam essa sintaxe para definir seus atributos em uma única instrução, e assim criamos rapidamente uma estrutura em memória para trabalhar.

```csharp
// Cria uma lista de livros
var bookshelf = new List<Book> {
	new Book { Title = "A Divina Comédia", Author = "Dante Alighieri", Publisher = "Editora 34", Year = 1321 },
	new Book { Title = "A Laranja Mecânica", Author = "Anthony Burgess", Publisher = "Aleph", Year = 1962 },
	new Book { Title = "A Montanha Mágica", Author = "Thomas Mann", Publisher = "Nova Fronteira", Year = 1924 },
	new Book { Title = "Admirável Mundo Novo", Author = "Aldous Huxley", Publisher = "Biblioteca Azul", Year = 1932 },
	new Book { Title = "Cem Anos de Solidão", Author = "Gabriel García Márquez", Publisher = "Record", Year = 1967 },
	new Book { Title = "Dom Quixote", Author = "Miguel de Cervantes", Publisher = "Francisco de Robles", Year = 1605 },
	new Book { Title = "Drácula", Author = "Bram Stoker", Publisher = "Zahar", Year = 1897 },
	new Book { Title = "Em Busca do Tempo Perdido", Author = "Marcel Proust", Publisher = "L&PM", Year = 1913 },
	new Book { 
        Title = "Ensaio Sobre a Cegueira", 
        Author = "Ensaio Sobre a Cegueira", 
        Publisher = "Companhia das Letras", 
        Year = 1995 
    },
	new Book { Title = "Guerra e Paz", Author = "Liev Tolstói", Publisher = "Cosac & Naify", Year = 1869 },
	new Book { Title = "Moby Dick", Author = "Herman Melville", Publisher = "Landmark", Year = 1851 },
	new Book { 
        Title = "O Apanhador no Campo de Centeio", 
        Author = "J. D. Salinger", 
        Publisher = "Editora do Autor", 
        Year = 1951 
    },
	new Book { Title = "O Guarani", Author = "Jose de Alencar", Publisher = "Jiahu Books", Year = 1857 },
	new Book { Title = "O Homem sem Qualidades", Author = "Robert Musil", Publisher = "Nova Fronteira", Year = 1930 },
	new Book { Title = "O Processo", Author = "Franz Kafka", Publisher = "Companhia de Bolso", Year = 1925 },
	new Book { Title = "O Retrato de Dorian Gray", Author = "Oscar Wilde", Publisher = "L&M Pocket", Year = 1890 },
	new Book { Title = "O Som e a Fúria", Author = "William Faulkner", Publisher = "Cosac & Naify", Year = 1929 },
	new Book { Title = "Os Miseráveis", Author = "Victor Hugo", Publisher = "Martin Claret", Year = 1862 },
	new Book { Title = "Os Três Mosqueteiros", Author = "Alexandre Dumas", Publisher = "Zahar", Year = 1844 },
	new Book { Title = "Ulisses", Author = "James Joyce", Publisher = "Penguin", Year = 1922 },
};
```

### Exercícios

**(1).** Enumere a coleção de livros apresentando seu título e autor e o ano da publicação. Ordene  a saída de acordo com o ano de publicação, apresentando os livros mais antigos primeiro.

> **Dica**: procure pelos métodos ForEach() e Sort() da classe List<T>.

```csharp
// Resposta
```

**(2).** Adicione 5 novos livros a variável **bookshelf**, e remova os livros “O Guarani”, “O Som e a Fúria” e “Os Miseráveis”. Ao final imprima a listagem.

> **Dica**: procure pelos métodos Add(), Find(), IndexOf() e Remove().

```csharp
// Resposta
```

**(3).** Obtenha a contagem dos registros na coleção de livros, cujo o ano de publicação seja maior que 1915. Separadamente obtenha a contagem dos livros publicados pela editora ‘Zahar’.

```csharp
// Resposta
```

**(4).** Utilizando a estrutura de dados para representar cores, criada no exercício anterior, crie uma lista com as cores do arco-iris.

```csharp
// Resposta
```

**(5).** Crie um dicionário para implementar um sistema de ajuda simples para as palavras-chaves do C#. A palavra-chave deve ser a chave, e o valor deve ser uma breve descrição do que ela representa e qual sua utilização.\
\
Ao final enumere o dicionário apresentando as palavras-chaves e sua documentação associada.

```csharp
// Resposta
```

**(6).** Utilize um dicionário para compor o cabeçalho de um REQUEST HTTP com as seguintes características:

* **Host**: o host do request será *www.it4cio.com*

* **Accept**: aceitar content-types do response no tipo* JSON* ou *XML*.

* **Accept-Language**: informe que o seu response pode ser retornado em línguage portuguesa ou inglesa.

* **Content-Lenght**: o request tem um conteúdo de 500 bytes.

* **Content-Type**: informe que o tipo de conteúdo no Request é um JSON.

* **User-Agent**: identifique o request com o browser que você costuma utilizar.

> Caso precise de uma referência sobre os cabeçalhos HTTP, consulte [este link](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields "este link").

Note que alguns cabeçalhos podem receber um ou mais parâmetros. Logo a estrutura dicionário para conter esses valores pode ser simples (armazenando apenas uma *string* como valor) ou composta (armazenando um tipo complexo como valor). Leve em consideração esses pontos em sua implementação.

```csharp
// Resposta
```